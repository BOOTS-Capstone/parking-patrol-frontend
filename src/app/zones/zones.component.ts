import { Component, OnInit } from '@angular/core';
import { Observable } from 'rxjs';

import { ZoneService } from './zone.service';
import { Zone } from './zone';
import { MapDataService } from '../map-data.service';
import { NgModel } from '@angular/forms';
import { FormsModule } from '@angular/forms';


@Component({
  selector: 'app-zones',
  standalone: false,
  templateUrl: './zones.component.html',
  styleUrl: './zones.component.css'
})
export class ZonesComponent {
  zones: Zone[] = [];
  selectedZone: Zone | null = null;
  editingZone: Zone | null = null;
  zoneType: 'handicap' | 'fire' = 'fire'; 
  zoneName: string = '';
  currentCoordinates: [number, number][] = []; 

  zoneEdited: boolean = false;
  zoneCreationView: boolean = false;
  showDialog: boolean = false;

  constructor(
    private zoneService: ZoneService,
    private mapDataService: MapDataService  
  ) { }

  selectZone(zone: Zone) {
    console.log(`selecting zone_id: ${zone.id}, name: ${zone.name} `)
    this.selectedZone = zone;
    this.mapDataService.setSelectedZone(zone);
  }

  ngOnInit(): void {
    this.zoneCreationView = false;
    this.loadZones();
    this.mapDataService.zones$.subscribe(zones => {
      this.zones = zones;
    })
    this.mapDataService.zoneCreated$.subscribe((coords:[number, number][]) => {
      this.openDialog(coords);
    });
  }

  openDialog(coordinates:[number,number][] , existingZone:Zone|null = null): void {
    this.showDialog = true;
    this.currentCoordinates = coordinates;

    if (existingZone) {
      this.editingZone = existingZone;
      this.zoneName = existingZone.name;
      this.zoneType = existingZone.type;
    } else {
      this.editingZone = null;
      this.zoneName = '';
      this.zoneType = 'fire';
    }
  }

  submitZone(): void {
    const newZone: Zone = {
      id: 0, // Set ID to 0 - it will be generated by the database
      name: this.zoneName,
      type: this.zoneType,
      coordinates: this.currentCoordinates
    };

    this.zoneService.addZone(newZone).subscribe({
      next: () => {
        console.log('Zone added successfully:', newZone);
        this.closeDialog();
        this.loadZones();
      },
      error: (err) => console.error('Error adding zone:', err)
    });
  }

  deleteZone(zone: Zone) {
    if (!confirm(`Delete zone "${zone.name}"?`)) {
      return;
    }
    this.zoneService.deleteZone(zone).subscribe({
      next: () => {
        this.ngOnInit()
        this.zoneService.getZones().subscribe(zones => {
          this.mapDataService.updateZones(zones);
        });
        this.closeDialog();
      },
      error: err => console.error('Failed to delete zone', err)
    });
  }

  private resetForm(): void {
    this.zoneName = '';
    this.zoneType = 'fire';
    this.currentCoordinates = [];
  }

  closeDialog(): void {
    this.showDialog = false;
    this.zoneName = '';
    this.zoneType = 'fire';
    this.editingZone = null;
  }

  loadZones(): void {
    this.zoneService.getZones().subscribe(
      (data: Zone[]) => {
        this.zones = data;
        this.mapDataService.updateZones(data);
        // console.log('Zones loaded:', this.zones);
      },
      (error) => {
        console.error('Error loading zones:', error);
      }
    );
  }
}
