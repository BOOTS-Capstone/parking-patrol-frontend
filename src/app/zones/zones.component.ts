import { Component, OnInit } from '@angular/core';
import { Observable } from 'rxjs';

import { ZoneService } from './zone.service';
// import { WaypointService } from '../waypoint.service';
import { Zone } from './zone';
// import { Waypoint } from '../waypoint';
import { MapDataService } from '../map-data.service';
import { NgModel } from '@angular/forms';
import { FormsModule } from '@angular/forms';


@Component({
  selector: 'app-zones',
  standalone: false,
  templateUrl: './zones.component.html',
  styleUrl: './zones.component.css'
})
export class ZonesComponent {
  zones: Zone[] = [];
  selectedZone: Zone | null = null;
  editingZone: Zone | null = null;
  zoneType: 'handicap' | 'fire' = 'fire'; 
  zoneName: string = '';
  currentCoordinates: [number, number][] = []; // Coordinates for the new zone

  zoneEdited: boolean = false;
  zoneCreationView: boolean = false;
  showDialog: boolean = false;

  constructor(
    private zoneService: ZoneService,
    // private waypointService: WaypointService,
    private mapDataService: MapDataService  // Inject the shared service
  ) { }

  selectZone(zone: Zone) {
    this.selectedZone = zone;
  }

  ngOnInit(): void {
    this.zoneCreationView = false;
    this.loadZones();
    this.mapDataService.zoneCreated$.subscribe((coords:[number, number][]) => {
      this.openDialog(coords);
      // this.zoneEdited = ;
      // console.log('Zone edited:', edited);
    });
  }

  openDialog(coordinates:[number,number][] , existingZone:Zone|null = null): void {
    this.showDialog = true;
    this.currentCoordinates = coordinates;

    if (existingZone) {
      this.editingZone = existingZone;
      this.zoneName = existingZone.name;
      this.zoneType = existingZone.type;
    } else {
      this.editingZone = null;
      this.zoneName = '';
      this.zoneType = 'fire';
    }
  }

  submitZone(): void {
    const newZone: Zone = {
      id: 0, // Set ID to 0 - it will be generated by the database
      name: this.zoneName,
      type: this.zoneType,
      coordinates: this.currentCoordinates
    };

    this.zoneService.addZone(newZone).subscribe({
      next: () => {
        console.log('Zone added successfully:', newZone);
        this.closeDialog();
      },
      error: (err) => console.error('Error adding zone:', err)
    });
  }

  // Reset form fields
  private resetForm(): void {
    this.zoneName = '';
    this.zoneType = 'fire';
    this.currentCoordinates = [];
  }

  closeDialog(): void {
    this.showDialog = false;
    this.zoneName = '';
    this.zoneType = 'fire';
    this.editingZone = null;
  }

  loadZones(): void {
    this.zoneService.getZones().subscribe(
      (data: Zone[]) => {
        this.zones = data;
        this.mapDataService.updateZones(data);
        console.log('Zones loaded:', this.zones);
  //       const savedSelectedZoneID = localStorage.getItem("selectedZoneID") ?? -1;
  //       if (savedSelectedZoneID != -1) {
  //         this.zones.forEach(zone => {
  //           if (zone.zone_id == parseInt(savedSelectedZoneID)) {
  //             this.selectZone(zone);
  //           }
  //         })
  //       }
      },
      (error) => {
        console.error('Error loading zones:', error);
      }
    );
  }

  deleteZone(zone: Zone) {
    console.log("deleteZone not implemented yet")
  }

}
